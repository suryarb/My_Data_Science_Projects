{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Malaria Detection for Tutorial - With Transfer Learning","provenance":[],"collapsed_sections":[],"authorship_tag":"ABX9TyNXtBVZr+WrVUsNAvyS9XHg"},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"code","metadata":{"id":"dClMPcgcAWpF","colab_type":"code","colab":{}},"source":["#from google.colab import drive\n","#drive.mount('/content/drive/')"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"YnA7vn2wAegI","colab_type":"code","colab":{}},"source":["#! unzip \"drive/My Drive/Colab Notebooks/cell_images.zip\""],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"59kbCvb9AhTy","colab_type":"code","colab":{}},"source":["# Importing packages\n","\n","import tensorflow.keras,os\n","from tensorflow.keras.models import Sequential\n","from tensorflow.keras.layers import Dense, Conv2D, MaxPool2D , Flatten\n","from tensorflow.keras.preprocessing.image import ImageDataGenerator\n","import numpy as np\n","import matplotlib.pyplot as plt\n"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"OKm8GZz-AlT7","colab_type":"code","outputId":"f1f1baac-9e8e-4e30-eee9-0abad3c91265","executionInfo":{"status":"ok","timestamp":1580174725952,"user_tz":-660,"elapsed":2852,"user":{"displayName":"Surya Bhattarai","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mCwvjK2fpuY9eA77y607KGfQi2lVj00ltzHI5EQK6g=s64","userId":"10448023072828963196"}},"colab":{"base_uri":"https://localhost:8080/","height":52}},"source":["# Train and test data\n","\n","trdata = ImageDataGenerator()\n","traindata = trdata.flow_from_directory(directory=\"cell_images/train\",target_size=(224,224))\n","tsdata = ImageDataGenerator()\n","testdata = tsdata.flow_from_directory(directory=\"cell_images/test\", target_size=(224,224))"],"execution_count":11,"outputs":[{"output_type":"stream","text":["Found 22046 images belonging to 2 classes.\n","Found 5502 images belonging to 2 classes.\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"6Qj5qi72AoLF","colab_type":"code","outputId":"bb667143-914f-4164-97d6-9704b355c798","executionInfo":{"status":"ok","timestamp":1580174729698,"user_tz":-660,"elapsed":6549,"user":{"displayName":"Surya Bhattarai","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mCwvjK2fpuY9eA77y607KGfQi2lVj00ltzHI5EQK6g=s64","userId":"10448023072828963196"}},"colab":{"base_uri":"https://localhost:8080/","height":1000}},"source":["from tensorflow.keras.applications.vgg16 import VGG16\n","from tensorflow.keras.applications.vgg16 import preprocess_input\n","from tensorflow.keras.models import Model, Sequential\n","\n","def preprocess_input_vgg(x):\n","    \"\"\"Wrapper around keras.applications.vgg16.preprocess_input()\n","    to make it compatible for use with keras.preprocessing.image.ImageDataGenerator's\n","    `preprocessing_function` argument.\n","    \n","    Parameters\n","    ----------\n","    x : a numpy 3darray (a single image to be preprocessed)\n","    \n","    Note we cannot pass keras.applications.vgg16.preprocess_input()\n","    directly to to keras.preprocessing.image.ImageDataGenerator's\n","    `preprocessing_function` argument because the former expects a\n","    4D tensor whereas the latter expects a 3D tensor. Hence the\n","    existence of this wrapper.\n","    \n","    Returns a numpy 3darray (the preprocessed image).\n","    \n","    \"\"\"\n","    X = np.expand_dims(x, axis=0)\n","    X = preprocess_input(X)\n","    return X[0]\n","\n","# Transfer learning\n","#loading the pre-trained model\n","vgg16 = VGG16(weights='imagenet') \n","\n","# vgg16 = VGG16(include_top=False, weights='imagenet', input_tensor=None, input_shape=None)\n","\n","vgg16.summary()\n","# select all layers before last one\n","x  = vgg16.get_layer('fc2').output\n","\n","#class by two (cat, dog)\n","prediction = Dense(2, activation='softmax', name='predictions')(x)\n","\n","# compile\n","model = Model(inputs=vgg16.input, outputs=prediction)\n","model.summary()\n","# find tuning the model. Make all layers untrainable\n","for layer in model.layers:\n","    layer.trainable = False\n","\n","# makes the layers from the last trainable\n","for layer in model.layers[-6:]:\n","    layer.trainable = True\n","    print(\"Layer '%s' is trainable\" % layer.name)"],"execution_count":12,"outputs":[{"output_type":"stream","text":["Model: \"vgg16\"\n","_________________________________________________________________\n","Layer (type)                 Output Shape              Param #   \n","=================================================================\n","input_2 (InputLayer)         [(None, 224, 224, 3)]     0         \n","_________________________________________________________________\n","block1_conv1 (Conv2D)        (None, 224, 224, 64)      1792      \n","_________________________________________________________________\n","block1_conv2 (Conv2D)        (None, 224, 224, 64)      36928     \n","_________________________________________________________________\n","block1_pool (MaxPooling2D)   (None, 112, 112, 64)      0         \n","_________________________________________________________________\n","block2_conv1 (Conv2D)        (None, 112, 112, 128)     73856     \n","_________________________________________________________________\n","block2_conv2 (Conv2D)        (None, 112, 112, 128)     147584    \n","_________________________________________________________________\n","block2_pool (MaxPooling2D)   (None, 56, 56, 128)       0         \n","_________________________________________________________________\n","block3_conv1 (Conv2D)        (None, 56, 56, 256)       295168    \n","_________________________________________________________________\n","block3_conv2 (Conv2D)        (None, 56, 56, 256)       590080    \n","_________________________________________________________________\n","block3_conv3 (Conv2D)        (None, 56, 56, 256)       590080    \n","_________________________________________________________________\n","block3_pool (MaxPooling2D)   (None, 28, 28, 256)       0         \n","_________________________________________________________________\n","block4_conv1 (Conv2D)        (None, 28, 28, 512)       1180160   \n","_________________________________________________________________\n","block4_conv2 (Conv2D)        (None, 28, 28, 512)       2359808   \n","_________________________________________________________________\n","block4_conv3 (Conv2D)        (None, 28, 28, 512)       2359808   \n","_________________________________________________________________\n","block4_pool (MaxPooling2D)   (None, 14, 14, 512)       0         \n","_________________________________________________________________\n","block5_conv1 (Conv2D)        (None, 14, 14, 512)       2359808   \n","_________________________________________________________________\n","block5_conv2 (Conv2D)        (None, 14, 14, 512)       2359808   \n","_________________________________________________________________\n","block5_conv3 (Conv2D)        (None, 14, 14, 512)       2359808   \n","_________________________________________________________________\n","block5_pool (MaxPooling2D)   (None, 7, 7, 512)         0         \n","_________________________________________________________________\n","flatten (Flatten)            (None, 25088)             0         \n","_________________________________________________________________\n","fc1 (Dense)                  (None, 4096)              102764544 \n","_________________________________________________________________\n","fc2 (Dense)                  (None, 4096)              16781312  \n","_________________________________________________________________\n","predictions (Dense)          (None, 1000)              4097000   \n","=================================================================\n","Total params: 138,357,544\n","Trainable params: 138,357,544\n","Non-trainable params: 0\n","_________________________________________________________________\n","Model: \"model_1\"\n","_________________________________________________________________\n","Layer (type)                 Output Shape              Param #   \n","=================================================================\n","input_2 (InputLayer)         [(None, 224, 224, 3)]     0         \n","_________________________________________________________________\n","block1_conv1 (Conv2D)        (None, 224, 224, 64)      1792      \n","_________________________________________________________________\n","block1_conv2 (Conv2D)        (None, 224, 224, 64)      36928     \n","_________________________________________________________________\n","block1_pool (MaxPooling2D)   (None, 112, 112, 64)      0         \n","_________________________________________________________________\n","block2_conv1 (Conv2D)        (None, 112, 112, 128)     73856     \n","_________________________________________________________________\n","block2_conv2 (Conv2D)        (None, 112, 112, 128)     147584    \n","_________________________________________________________________\n","block2_pool (MaxPooling2D)   (None, 56, 56, 128)       0         \n","_________________________________________________________________\n","block3_conv1 (Conv2D)        (None, 56, 56, 256)       295168    \n","_________________________________________________________________\n","block3_conv2 (Conv2D)        (None, 56, 56, 256)       590080    \n","_________________________________________________________________\n","block3_conv3 (Conv2D)        (None, 56, 56, 256)       590080    \n","_________________________________________________________________\n","block3_pool (MaxPooling2D)   (None, 28, 28, 256)       0         \n","_________________________________________________________________\n","block4_conv1 (Conv2D)        (None, 28, 28, 512)       1180160   \n","_________________________________________________________________\n","block4_conv2 (Conv2D)        (None, 28, 28, 512)       2359808   \n","_________________________________________________________________\n","block4_conv3 (Conv2D)        (None, 28, 28, 512)       2359808   \n","_________________________________________________________________\n","block4_pool (MaxPooling2D)   (None, 14, 14, 512)       0         \n","_________________________________________________________________\n","block5_conv1 (Conv2D)        (None, 14, 14, 512)       2359808   \n","_________________________________________________________________\n","block5_conv2 (Conv2D)        (None, 14, 14, 512)       2359808   \n","_________________________________________________________________\n","block5_conv3 (Conv2D)        (None, 14, 14, 512)       2359808   \n","_________________________________________________________________\n","block5_pool (MaxPooling2D)   (None, 7, 7, 512)         0         \n","_________________________________________________________________\n","flatten (Flatten)            (None, 25088)             0         \n","_________________________________________________________________\n","fc1 (Dense)                  (None, 4096)              102764544 \n","_________________________________________________________________\n","fc2 (Dense)                  (None, 4096)              16781312  \n","_________________________________________________________________\n","predictions (Dense)          (None, 2)                 8194      \n","=================================================================\n","Total params: 134,268,738\n","Trainable params: 134,268,738\n","Non-trainable params: 0\n","_________________________________________________________________\n","Layer 'block5_conv3' is trainable\n","Layer 'block5_pool' is trainable\n","Layer 'flatten' is trainable\n","Layer 'fc1' is trainable\n","Layer 'fc2' is trainable\n","Layer 'predictions' is trainable\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"5vli89I2gvWs","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":950},"outputId":"118eae2a-48f1-414b-ffbf-c76b18dc9cb7","executionInfo":{"status":"ok","timestamp":1580174729698,"user_tz":-660,"elapsed":6526,"user":{"displayName":"Surya Bhattarai","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mCwvjK2fpuY9eA77y607KGfQi2lVj00ltzHI5EQK6g=s64","userId":"10448023072828963196"}}},"source":["model.summary()"],"execution_count":13,"outputs":[{"output_type":"stream","text":["Model: \"model_1\"\n","_________________________________________________________________\n","Layer (type)                 Output Shape              Param #   \n","=================================================================\n","input_2 (InputLayer)         [(None, 224, 224, 3)]     0         \n","_________________________________________________________________\n","block1_conv1 (Conv2D)        (None, 224, 224, 64)      1792      \n","_________________________________________________________________\n","block1_conv2 (Conv2D)        (None, 224, 224, 64)      36928     \n","_________________________________________________________________\n","block1_pool (MaxPooling2D)   (None, 112, 112, 64)      0         \n","_________________________________________________________________\n","block2_conv1 (Conv2D)        (None, 112, 112, 128)     73856     \n","_________________________________________________________________\n","block2_conv2 (Conv2D)        (None, 112, 112, 128)     147584    \n","_________________________________________________________________\n","block2_pool (MaxPooling2D)   (None, 56, 56, 128)       0         \n","_________________________________________________________________\n","block3_conv1 (Conv2D)        (None, 56, 56, 256)       295168    \n","_________________________________________________________________\n","block3_conv2 (Conv2D)        (None, 56, 56, 256)       590080    \n","_________________________________________________________________\n","block3_conv3 (Conv2D)        (None, 56, 56, 256)       590080    \n","_________________________________________________________________\n","block3_pool (MaxPooling2D)   (None, 28, 28, 256)       0         \n","_________________________________________________________________\n","block4_conv1 (Conv2D)        (None, 28, 28, 512)       1180160   \n","_________________________________________________________________\n","block4_conv2 (Conv2D)        (None, 28, 28, 512)       2359808   \n","_________________________________________________________________\n","block4_conv3 (Conv2D)        (None, 28, 28, 512)       2359808   \n","_________________________________________________________________\n","block4_pool (MaxPooling2D)   (None, 14, 14, 512)       0         \n","_________________________________________________________________\n","block5_conv1 (Conv2D)        (None, 14, 14, 512)       2359808   \n","_________________________________________________________________\n","block5_conv2 (Conv2D)        (None, 14, 14, 512)       2359808   \n","_________________________________________________________________\n","block5_conv3 (Conv2D)        (None, 14, 14, 512)       2359808   \n","_________________________________________________________________\n","block5_pool (MaxPooling2D)   (None, 7, 7, 512)         0         \n","_________________________________________________________________\n","flatten (Flatten)            (None, 25088)             0         \n","_________________________________________________________________\n","fc1 (Dense)                  (None, 4096)              102764544 \n","_________________________________________________________________\n","fc2 (Dense)                  (None, 4096)              16781312  \n","_________________________________________________________________\n","predictions (Dense)          (None, 2)                 8194      \n","=================================================================\n","Total params: 134,268,738\n","Trainable params: 121,913,858\n","Non-trainable params: 12,354,880\n","_________________________________________________________________\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"8DtpD9RNAtot","colab_type":"code","colab":{}},"source":["# compile the model\n","\n","from tensorflow.keras.optimizers import Adam\n","opt = Adam(lr=0.001)\n","model.compile(optimizer=opt, loss=tensorflow.keras.losses.categorical_crossentropy, metrics=['accuracy'])"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"IrpD_T_-AuZa","colab_type":"code","outputId":"5289006a-c710-4781-865d-0823da725f52","executionInfo":{"status":"ok","timestamp":1580174729700,"user_tz":-660,"elapsed":6511,"user":{"displayName":"Surya Bhattarai","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mCwvjK2fpuY9eA77y607KGfQi2lVj00ltzHI5EQK6g=s64","userId":"10448023072828963196"}},"colab":{"base_uri":"https://localhost:8080/","height":950}},"source":["model.summary()"],"execution_count":15,"outputs":[{"output_type":"stream","text":["Model: \"model_1\"\n","_________________________________________________________________\n","Layer (type)                 Output Shape              Param #   \n","=================================================================\n","input_2 (InputLayer)         [(None, 224, 224, 3)]     0         \n","_________________________________________________________________\n","block1_conv1 (Conv2D)        (None, 224, 224, 64)      1792      \n","_________________________________________________________________\n","block1_conv2 (Conv2D)        (None, 224, 224, 64)      36928     \n","_________________________________________________________________\n","block1_pool (MaxPooling2D)   (None, 112, 112, 64)      0         \n","_________________________________________________________________\n","block2_conv1 (Conv2D)        (None, 112, 112, 128)     73856     \n","_________________________________________________________________\n","block2_conv2 (Conv2D)        (None, 112, 112, 128)     147584    \n","_________________________________________________________________\n","block2_pool (MaxPooling2D)   (None, 56, 56, 128)       0         \n","_________________________________________________________________\n","block3_conv1 (Conv2D)        (None, 56, 56, 256)       295168    \n","_________________________________________________________________\n","block3_conv2 (Conv2D)        (None, 56, 56, 256)       590080    \n","_________________________________________________________________\n","block3_conv3 (Conv2D)        (None, 56, 56, 256)       590080    \n","_________________________________________________________________\n","block3_pool (MaxPooling2D)   (None, 28, 28, 256)       0         \n","_________________________________________________________________\n","block4_conv1 (Conv2D)        (None, 28, 28, 512)       1180160   \n","_________________________________________________________________\n","block4_conv2 (Conv2D)        (None, 28, 28, 512)       2359808   \n","_________________________________________________________________\n","block4_conv3 (Conv2D)        (None, 28, 28, 512)       2359808   \n","_________________________________________________________________\n","block4_pool (MaxPooling2D)   (None, 14, 14, 512)       0         \n","_________________________________________________________________\n","block5_conv1 (Conv2D)        (None, 14, 14, 512)       2359808   \n","_________________________________________________________________\n","block5_conv2 (Conv2D)        (None, 14, 14, 512)       2359808   \n","_________________________________________________________________\n","block5_conv3 (Conv2D)        (None, 14, 14, 512)       2359808   \n","_________________________________________________________________\n","block5_pool (MaxPooling2D)   (None, 7, 7, 512)         0         \n","_________________________________________________________________\n","flatten (Flatten)            (None, 25088)             0         \n","_________________________________________________________________\n","fc1 (Dense)                  (None, 4096)              102764544 \n","_________________________________________________________________\n","fc2 (Dense)                  (None, 4096)              16781312  \n","_________________________________________________________________\n","predictions (Dense)          (None, 2)                 8194      \n","=================================================================\n","Total params: 134,268,738\n","Trainable params: 121,913,858\n","Non-trainable params: 12,354,880\n","_________________________________________________________________\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"ZSy_pVfvAzXI","colab_type":"code","outputId":"811576e1-f565-42f8-b40e-8ea407cda8a2","executionInfo":{"status":"ok","timestamp":1580174729702,"user_tz":-660,"elapsed":6480,"user":{"displayName":"Surya Bhattarai","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mCwvjK2fpuY9eA77y607KGfQi2lVj00ltzHI5EQK6g=s64","userId":"10448023072828963196"}},"colab":{"base_uri":"https://localhost:8080/","height":35}},"source":["# Train the model\n","\n","from keras.callbacks import ModelCheckpoint, EarlyStopping\n","checkpoint = ModelCheckpoint(\"vgg16_1.h5\", monitor='val_acc', verbose=1, save_best_only=True, save_weights_only=False, mode='auto', period=1)\n","early = EarlyStopping(monitor='val_acc', min_delta=0, patience=20, verbose=1, mode='auto')"],"execution_count":16,"outputs":[{"output_type":"stream","text":["Using TensorFlow backend.\n"],"name":"stderr"}]},{"cell_type":"code","metadata":{"id":"ybHg6pZYA2iv","colab_type":"code","outputId":"115f0ea0-800e-420f-820e-7cd89b553ce6","executionInfo":{"status":"ok","timestamp":1580176499860,"user_tz":-660,"elapsed":1776601,"user":{"displayName":"Surya Bhattarai","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mCwvjK2fpuY9eA77y607KGfQi2lVj00ltzHI5EQK6g=s64","userId":"10448023072828963196"}},"colab":{"base_uri":"https://localhost:8080/","height":555}},"source":["hist = model.fit_generator(steps_per_epoch=10,generator=traindata, validation_data= testdata, validation_steps=10,epochs=5,callbacks=[checkpoint,early])"],"execution_count":17,"outputs":[{"output_type":"stream","text":["Epoch 1/5\n"," 9/10 [==========================>...] - ETA: 18s - loss: 73.2520 - acc: 0.4722Epoch 1/5\n","10/10 [==============================] - 166s 17s/step - loss: 1.2109 - acc: 0.4750\n","\n","Epoch 00001: val_acc improved from -inf to 0.47500, saving model to vgg16_1.h5\n","10/10 [==============================] - 359s 36s/step - loss: 66.0115 - acc: 0.4812 - val_loss: 1.2109 - val_acc: 0.4750\n","Epoch 2/5\n"," 9/10 [==========================>...] - ETA: 18s - loss: 0.6263 - acc: 0.6910Epoch 1/5\n","10/10 [==============================] - 166s 17s/step - loss: 0.2753 - acc: 0.8875\n","\n","Epoch 00002: val_acc improved from 0.47500 to 0.88750, saving model to vgg16_1.h5\n","10/10 [==============================] - 354s 35s/step - loss: 0.5881 - acc: 0.7125 - val_loss: 0.2753 - val_acc: 0.8875\n","Epoch 3/5\n"," 9/10 [==========================>...] - ETA: 18s - loss: 0.2970 - acc: 0.9062Epoch 1/5\n","10/10 [==============================] - 166s 17s/step - loss: 0.3077 - acc: 0.9031\n","\n","Epoch 00003: val_acc improved from 0.88750 to 0.90312, saving model to vgg16_1.h5\n","10/10 [==============================] - 355s 36s/step - loss: 0.2935 - acc: 0.9062 - val_loss: 0.3077 - val_acc: 0.9031\n","Epoch 4/5\n"," 9/10 [==========================>...] - ETA: 18s - loss: 0.2815 - acc: 0.8958Epoch 1/5\n","10/10 [==============================] - 165s 17s/step - loss: 0.2989 - acc: 0.8844\n","\n","Epoch 00004: val_acc did not improve from 0.90312\n","10/10 [==============================] - 348s 35s/step - loss: 0.2774 - acc: 0.8969 - val_loss: 0.2989 - val_acc: 0.8844\n","Epoch 5/5\n"," 9/10 [==========================>...] - ETA: 18s - loss: 0.2468 - acc: 0.9271Epoch 1/5\n","10/10 [==============================] - 165s 17s/step - loss: 0.2255 - acc: 0.9438\n","\n","Epoch 00005: val_acc improved from 0.90312 to 0.94375, saving model to vgg16_1.h5\n","10/10 [==============================] - 353s 35s/step - loss: 0.2258 - acc: 0.9344 - val_loss: 0.2255 - val_acc: 0.9438\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"XmvO3cB-A3LO","colab_type":"code","outputId":"598d972f-0528-48e9-8719-4201f90bdb4b","executionInfo":{"status":"ok","timestamp":1580179947654,"user_tz":-660,"elapsed":2541,"user":{"displayName":"Surya Bhattarai","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mCwvjK2fpuY9eA77y607KGfQi2lVj00ltzHI5EQK6g=s64","userId":"10448023072828963196"}},"colab":{"base_uri":"https://localhost:8080/","height":295}},"source":["import matplotlib.pyplot as plt\n","plt.plot(hist.history[\"acc\"])\n","plt.plot(hist.history['val_acc'])\n","#plt.plot(hist.history['loss'])\n","#plt.plot(hist.history['val_loss'])\n","plt.title(\"Accuracy\")\n","plt.ylabel(\"Accuracy Value\")\n","plt.xlabel(\"Epoch\")\n","plt.legend([\"Train Accuracy\",\"Validation Accuracy\",\"loss\",\"Validation Loss\"])\n","plt.show()"],"execution_count":25,"outputs":[{"output_type":"display_data","data":{"image/png":"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\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[]}}]},{"cell_type":"code","metadata":{"id":"_c0rCLimhKAR","colab_type":"code","colab":{}},"source":["model.save('drive/My Drive/Colab Notebooks/malaria_transfer_cnn.h5')"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"mhgWtVZFgU8i","colab_type":"code","outputId":"2c0ad334-7ebd-4fbc-a968-9ff53d90ad6c","executionInfo":{"status":"error","timestamp":1580176554275,"user_tz":-660,"elapsed":1830942,"user":{"displayName":"Surya Bhattarai","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mCwvjK2fpuY9eA77y607KGfQi2lVj00ltzHI5EQK6g=s64","userId":"10448023072828963196"}},"colab":{"base_uri":"https://localhost:8080/","height":399}},"source":["from tensorflow.keras.preprocessing import image\n","\n","img = image.load_img(\"cell_images/live_cells/Detect/C201ThinF_IMG_20150930_143502_cell_68.png\",target_size=(224,224))\n","img = np.asarray(img)\n","plt.imshow(img)\n","img = np.expand_dims(img, axis=0)\n","\n","from tensorflow.keras.models import load_model\n","saved_model = load_model(\"drive/My Drive/Colab Notebooks/malaria_transfer_cnn.h5\")\n","output = saved_model.predict(img)\n","if output[0][0] > output[0][1]:\n","    print(\"Parasitized\")\n","else:\n","    print('Uninfected')"],"execution_count":20,"outputs":[{"output_type":"error","ename":"FileNotFoundError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mFileNotFoundError\u001b[0m                         Traceback (most recent call last)","\u001b[0;32m<ipython-input-20-eaabd35a546b>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0mtensorflow\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mkeras\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpreprocessing\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mimage\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 3\u001b[0;31m \u001b[0mimg\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mimage\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mload_img\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"cell_images/live_cells/Detect/C201ThinF_IMG_20150930_143502_cell_68.png\"\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mtarget_size\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m224\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m224\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      4\u001b[0m \u001b[0mimg\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0masarray\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mimg\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mimshow\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mimg\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/keras_preprocessing/image/utils.py\u001b[0m in \u001b[0;36mload_img\u001b[0;34m(path, grayscale, color_mode, target_size, interpolation)\u001b[0m\n\u001b[1;32m    108\u001b[0m         raise ImportError('Could not import PIL.Image. '\n\u001b[1;32m    109\u001b[0m                           'The use of `load_img` requires PIL.')\n\u001b[0;32m--> 110\u001b[0;31m     \u001b[0mimg\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mpil_image\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mopen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mpath\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    111\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mcolor_mode\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;34m'grayscale'\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    112\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mimg\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmode\u001b[0m \u001b[0;34m!=\u001b[0m \u001b[0;34m'L'\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/PIL/Image.py\u001b[0m in \u001b[0;36mopen\u001b[0;34m(fp, mode)\u001b[0m\n\u001b[1;32m   2764\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2765\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mfilename\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 2766\u001b[0;31m         \u001b[0mfp\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mbuiltins\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mopen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfilename\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\"rb\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   2767\u001b[0m         \u001b[0mexclusive_fp\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mTrue\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2768\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mFileNotFoundError\u001b[0m: [Errno 2] No such file or directory: 'cell_images/live_cells/Detect/C201ThinF_IMG_20150930_143502_cell_68.png'"]}]}]}